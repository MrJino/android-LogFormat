File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties properties = new Properties()
    properties.load(secretPropsFile.newDataInputStream())

    ext["ossrhUsername"] = properties.getProperty('ossrhUsername')
    ext["ossrhPassword"] = properties.getProperty('ossrhPassword')
    ext["sonatypeStagingProfileId"] = properties.getProperty('sonatypeStagingProfileId')
    ext["signing.keyId"] = properties.getProperty('signing.keyId')
    ext["signing.password"] = properties.getProperty('signing.password')
    ext["signing.secretKeyRingFile"] = properties.getProperty('signing.secretKeyRingFile')
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

// Set up Sonatype repository
nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}